@startuml
'https://plantuml.com/class-diagram


left to right direction


skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam lineThickness 2
skinparam defaultFontName Arial
skinparam nodeMargin 30
skinparam componentStyle rectangle


skinparam linetype ortho

package "Model" {
    abstract class Person {
        -personID: int
        -name: String
        -email: String
        -address: Address
        -phone: int
        +login()
        +createAccount()
        +updateProfile()
    }

    class User extends Person {
        -donationHistory: DonationDetails
        -nationalID: int
        -registeredEvents: Event
        -skills: List<String>
        -isVolunteer: boolean
        +trackDonationHistory()
        +trackDonationStatus()
        +setRecurringDonations()
        +receiveReminder()
        +fillDonationForm()
        +choosePickUpOrDropOff()
        +receiveNotification()
        +signUpForEvent(Event event)
        +updateSkills(List<String> newSkills)
        +checkAvailability()
    }

    class HospitalAdmin extends Person {
        -hospitalID: int
        +uploadRequiredItems()
        +notifyExpiringMedicine()
        +manageItems()
        +updateDonationRequest()
        +reviewDonation()
        +receiveNotification()
    }

    class Address {
        -address_id: int
        -name: String
        -parent_id: int 
    }

    abstract class Item {
        -itemID: int
        -name: String
        -itemDescription : String
        -quantityAvailable: int
        +checkAvailability()
    }

    class VolunteerDetails {
        -volunteerID: int
        -eventID: int
        -hours: int
        +getDetails()
    }

    class Event {
        -eventID: int
        -name: String
        -date: date
        -location: String
        -description: String
        -volunteerList: List
        +createEvent()
        +updateEvent()
        +deleteEvent()
        +notifyVolunteers()
    }

    class EventDetails {
        -eventDetailsID: int
        -eventID: int
        -volunteerID: int
        -attendance: String
        +getDetails()
    }

    class Medicine extends Item {
        -expiryDate: date
        +checkExpiry()
    }

    class Equipment extends Item {
        -condition: String
        +checkCondition()
    }

    interface Donate {
        +makeDonation()
    }

    class DonationDetails {
        -donationDetailsID: int
        -donationID: int
        -medicineID: int
        -equipmentID: int
        -quantity: int
        +getDetails()
    }

    class BasicDonation implements Donate {
        -donationID: int
        -medicineID: int
        -quantity: int
        +makeDonation()
    }

   
}

package "View" {
    
    abstract class BaseView {
        +render()
        +update()
    }

    class DonorDashboardView extends BaseView {
        +displayDonationHistory()
        +showDonationForm()
        +displayNotifications()
    }

    class HospitalAdminDashboardView extends BaseView {
        +displayInventory()
        +showDonationRequests()
        +displayNotifications()
    }

    class LoginView extends BaseView {
        +showLoginForm()
        +displayError()
    }

    class PaymentView extends BaseView {
        +showPaymentForm()
        +displayConfirmation()
    }

    class DonationHistoryView extends BaseView {
        +displayDonationHistory()
        +displayDonationDetails()
    }

    class RegistrationView extends BaseView {
        +showRegistrationForm()
        +displayError()
    }

    class NotificationView extends BaseView {
        +displayNotification()
    }

    class EventView extends BaseView {
        +showEventDetails()
       
    }

    class UserProfileView extends BaseView {
        +showProfileDetails()
        +showUpdateForm()
    }

    class VolunteerRegistrationView extends BaseView {
        +showVolunteerForm()
        +displayConfirmation()
    }

    class SearchResultsView extends BaseView {
        +displayResults()
    }

    class FilterResultsView extends BaseView {
        +displayFilteredResults()
    }
}

package "Controller" {
    class PaymentController {
        -paymentStrategy: PaymentStrategy
        -paymentID: int
        -amount: int
        -date: date
        -paymentMethod: String
        +makePayment()
    }

    class LoginController {
        -loginStrategy: LoginStrategy
        +login(userCredentials)
    }

    class SearchController {
        -searchStrategy: SearchStrategy
        +search(searchQuery)
    }

    class DonationFilterController {
        -filterStrategy: FilterStrategy
        +filter(searchQuery)
    }

    class DonationHistoryFilterController {
        -filterStrategy: FilterStrategy
        +filter(searchQuery)
    }

    class DonationController {
        +createDonation(donationDetails)
        +updateDonation(donationID, updatedDetails)
        +cancelDonation(donationID)
        +viewDonationStatus(donationID)
    }

    class UserController {
        +registerUser(userDetails)
        +loginUser(userCredentials)
        +updateProfile(userID, updatedDetails)
        +trackDonationHistory(userID)
    }

    class EventController {
        +createEvent(eventDetails)
        +updateEvent(eventID, updatedDetails)
        +deleteEvent(eventID)
        +notifyVolunteers(eventID)
    }
}

package "Services" {
    abstract class DonationDecorator {
        -wrappedDonation: Donate
        +makeDonation()
    }

    class RecurringDonation extends DonationDecorator {
        -frequency
        +makeDonation()
    }

    class MedicalEquipmentDonation extends DonationDecorator {
        -equipmentList: List
        +makeDonation()
    }

    class FundsDonation extends DonationDecorator {
        -amount
        +makeDonation()
    }

    interface Observer {
        +update(notificationType: String, message: String)
    }

    class EmailNotification implements Observer {
        -status: String
        +update(notificationType: String, message: String)
    }

    class InAppNotification implements Observer {
        -status: String
        +update(notificationType: String, message: String)
    }

    class SMSNotification implements Observer {
        -status: String
        +update(notificationType: String, message: String)
    }

    interface Subject {
        +subscribe(observer: Observer)
        +unsubscribe(observer: Observer)
        +notifySubscribers(notificationType: String, message: String)
    }

    class NotificationSubject extends Subject {
        -subscribers: List<Observer>
        -state: String
        +subscribe(observer: Observer)
        +unsubscribe(observer: Observer)
        +notifySubscribers(notificationType: String, message: String)
    }

    interface PaymentStrategy {
        +pay(paymentDetails)
    }

    class OnlinePayment implements PaymentStrategy {
        +pay(paymentDetails)
    }

    class CashPayment implements PaymentStrategy {
        +pay(paymentDetails)
    }

    interface LoginStrategy {
        +login(userCredentials)
    }

    class EmailLogin implements LoginStrategy {
        +login(userCredentials)
    }

    class GoogleLogin implements LoginStrategy {
        +login(userCredentials)
    }

    class FacebookLogin implements LoginStrategy {
        +login(userCredentials)
    }

    interface SearchStrategy {
        +search(searchQuery)
    }

    class SearchByMedicine implements SearchStrategy {
        +search(searchQuery)
    }

    class SearchByHospital implements SearchStrategy {
        +search(searchQuery)
    }

    class SearchByEquipment implements SearchStrategy {
        +search(searchQuery)
    }

    interface FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByRecentGroup implements FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByItemTypeGroup implements FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByHospitalGroup implements FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByUrgencyGroup implements FilterStrategy {
        +filter(searchQuery)
    }
} 

' Define relationships between classes
User *-- BasicDonation
User o-- DonationDetails
Medicine *-- DonationDetails
BasicDonation *-- DonationDetails
LoginController o-- LoginStrategy
User -- LoginController
SearchController o-- SearchStrategy
User -- SearchController
HospitalAdmin o-- Item
Equipment *-- DonationDetails
User *-- Address
PaymentController o-- PaymentStrategy
User -- PaymentController
User -- DonationHistoryFilterController
DonationHistoryFilterController o-- FilterStrategy
HospitalAdmin *-- Address
HospitalAdmin -- DonationFilterController
DonationFilterController o-- FilterStrategy
Address "0..*" --> "1" Address : Parent
Event *-- EventDetails
User o-- VolunteerDetails
Event -- User

UserController o-- LoginStrategy  
UserController --> Person  
DonorDashboardView --> DonationController 
HospitalAdminDashboardView --> DonationController 
LoginView --> LoginController 
PaymentView --> PaymentController 
DonationHistoryView --> DonationController 
RegistrationView --> UserController 
Person <-- UserController
Donate <--o DonationDecorator
User -- EventDetails
Event -- EventController
DonationController <-- NotificationSubject
UserController <-- NotificationSubject
EventController <-- NotificationSubject
NotificationSubject o--> Observer

@enduml
