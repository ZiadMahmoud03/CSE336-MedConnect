@startuml
'https://plantuml.com/class-diagram

package "Model" {
    abstract class Person {
        -personID: int
        -name: String
        -email: String
        -phone: int
        +login()
        +createAccount()
        +updateProfile()
    }

    class User extends Person {
        -donationHistory: DonationDetails
        -nationalID: int
        -address: Address
        -feedbackHistory: Feedback
        -registeredEvents: Event
        -skills: List<String>
        -isVolunteer: boolean
        +trackDonationHistory()
        +trackDonationStatus()
        +setRecurringDonations()
        +receiveReminder()
        +fillDonationForm()
        +choosePickUpOrDropOff()
        +receiveNotification()
        +signUpForEvent(Event event)
        +updateSkills(List<String> newSkills)
        +provideFeedback(Event event, EventFeedback feedback)
        +checkAvailability()
        
    }

    class HospitalAdmin extends Person {
        -hospitalID: int
        -address: Address
        +uploadRequiredItems()
        +notifyExpiringMedicine()
        +manageItems()
        +updateDonationRequest()
        +reviewDonation()
        +receiveNotification()
    }

    class Address {
        -address_id: int
        -name: String
        -parent_id: int 
    }

    abstract class Item {
        -itemID: int
        -name: String
        -quantityAvailable: int
        +checkAvailability()
    }

    class VolunteerDetails{
        -volunteerID: int
        -eventID: int
        -hours: int
        +getDetails()
    }

    class Event{
        -eventID: int
        -name: String
        -date: date
        -location: String
        -description: String
        -volunteerList: List
        +createEvent()
        +updateEvent()
        +deleteEvent()
        +notifyVolunteers()
        +addFeedback(EventFeedback feedback)
    }

    class EventDetails{
        -eventDetailsID: int
        -eventID: int
        -volunteerID: int
        -attendance: String
        +getDetails()
    }

    class Medicine extends Item {
        -expiryDate: date
        +checkExpiry()
    }

    class Equipment extends Item {
        -condition: String
        +checkCondition()
    }

    interface Donate {
        +makeDonation()
    }

    class DonationDetails {
        -donationDetailsID: int
        -donationID: int
        -medicineID: int
        -equipmentID: int
        -quantity: int
        +getDetails()
    }

    class BasicDonation implements Donate {
        -donationID: int
        -medicineID: int
        -quantity: int
        +makeDonation()
    }

    class EventFeedback {
        -feedbackID: int
        -eventID: int
        -userID: int
        -rating: int
        -comments: String
        +getFeedbackDetails(): String
        +getRatings(): int
    }


}

package "View" {
    
    abstract class BaseView {
        +render()
        +update()
    }

    class DonorDashboardView extends BaseView {
        +displayDonationHistory()
        +showDonationForm()
        +displayNotifications()
    }

    class HospitalAdminDashboardView extends BaseView {
        +displayInventory()
        +showDonationRequests()
        +displayNotifications()
    }

    class LoginView extends BaseView {
        +showLoginForm()
        +displayError()
    }

    class PaymentView extends BaseView {
        +showPaymentForm()
        +displayConfirmation()
    }

    class DonationHistoryView extends BaseView {
        +displayDonationHistory()
        +displayDonationDetails()
    }

    class RegistrationView extends BaseView {
        +showRegistrationForm()
        +displayError()
    }

    class EventFeedbackView extends BaseView {
        +showFeedbackForm()
        +displayFeedback()
    }

    class NotificationView extends BaseView {
        +displayNotification()
    }

    class EventView extends BaseView {
        +showEventDetails()
        +displayEventFeedback()
    }
}

package "Controller" {
    class PaymentController {
        -paymentStrategy: PaymentStrategy
        -paymentID: int
        -amount: int
        -date: date
        -paymentMethod: String
        +makePayment()
    }

    class LoginController {
        -loginStrategy: LoginStrategy
        +login(userCredentials)
    }

    class SearchController {
        -searchStrategy: SearchStrategy
        +search(searchQuery)
    }

    class DonationFilterController {
        -filterStrategy: FilterStrategy
        +filter(searchQuery)
    }

    class DonationHistoryFilterController {
        -filterStrategy: FilterStrategy
        +filter(searchQuery)
    }

    class DonationController {
        +createDonation(donationDetails)
        +updateDonation(donationID, updatedDetails)
        +cancelDonation(donationID)
        +viewDonationStatus(donationID)
    }

    class UserController {
        +registerUser(userDetails)
        +loginUser(userCredentials)
        +updateProfile(userID, updatedDetails)
        +trackDonationHistory(userID)
    }



    class EventController {
        +createEvent(eventDetails)
        +updateEvent(eventID, updatedDetails)
        +deleteEvent(eventID)
        +notifyVolunteers(eventID)
    }
}


package "Services" {

    abstract class DonationDecorator {
        -wrappedDonation: Donate
        +makeDonation()
    }

    class RecurringDonation extends DonationDecorator {
        -frequency
        +makeDonation()
    }

    class MedicalEquipmentDonation extends DonationDecorator {
        -equipmentList: List
        +makeDonation()
    }

    class FundsDonation extends DonationDecorator {
        -amount
        +makeDonation()
    }

     interface Notification {
        +sendNotification(donorID, message)
    }

    class EmailNotification implements Notification {
        +send(donorID, message)
    }

    class InAppNotification implements Notification {
        +send(donorID, message)
    }

    class NotificationFactory {
        +createNotification()
    }

    interface PaymentStrategy {
        +pay(paymentDetails)
    }

    class OnlinePayment implements PaymentStrategy {
        +pay(paymentDetails)
    }

    class CashPayment implements PaymentStrategy {
        +pay(paymentDetails)
    }

    interface LoginStrategy {
        +login(userCredentials)
    }

    class EmailLogin implements LoginStrategy {
        +login(userCredentials)
    }

    class GoogleLogin implements LoginStrategy {
        +login(userCredentials)
    }

    class FacebookLogin implements LoginStrategy {
        +login(userCredentials)
    }

    interface SearchStrategy {
        +search(searchQuery)
    }

    class SearchByMedicine implements SearchStrategy {
        +search(searchQuery)
    }

    class SearchByHospital implements SearchStrategy {
        +search(searchQuery)
    }

    class SearchByEquipment implements SearchStrategy {
        +search(searchQuery)
    }

    interface FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByRecentGroup implements FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByItemTypeGroup implements FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByHospitalGroup implements FilterStrategy {
        +filter(searchQuery)
    }

    class FilterByUrgencyGroup implements FilterStrategy {
        +filter(searchQuery)
    }

   
} 

User *-- BasicDonation
User o-- DonationDetails
Medicine *-- DonationDetails
BasicDonation *-- DonationDetails
DonationDecorator o-- Donate
LoginController o-- LoginStrategy
User -- LoginController
SearchController o-- SearchStrategy
User -- SearchController
HospitalAdmin o-- Item
Equipment *-- DonationDetails
User *-- Address
PaymentController o-- PaymentStrategy
User -- PaymentController
User -- DonationHistoryFilterController
DonationHistoryFilterController o-- FilterStrategy
HospitalAdmin *-- Address
HospitalAdmin -- DonationFilterController
DonationFilterController o-- FilterStrategy
Person <-- NotificationFactory
NotificationFactory --> EmailNotification
NotificationFactory --> InAppNotification
Address "0..*" --> "1" Address : Parent
Event *-- EventDetails
User o-- VolunteerDetails
Event -- User
User *-- EventFeedback 
Event o-- EventFeedback 
DonationController o-- Notification  
UserController o-- LoginStrategy  
UserController --> Person  
UserController -- NotificationFactory
DonorDashboardView --> DonationController 
HospitalAdminDashboardView --> DonationController 
LoginView --> LoginController 
PaymentView --> PaymentController 
DonationHistoryView --> DonationController 
RegistrationView --> UserController 
Person <-- UserController
Donate <-- DonationDecorator
User -- EventDetails
Event -- EventController


@enduml
